plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'
}

android {
    compileSdk 31

    productFlavors.all {
        ext.apkVersionNameSuffix = null
    }

    defaultConfig {
        applicationId "com.github.k1rakishou.kurobaexlite"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            universalApk false
        }
    }

    flavorDimensions "default"

    productFlavors {
        // FLAVOR_TYPE 0 - release (stable) build
        // FLAVOR_TYPE 1 - beta build
        // FLAVOR_TYPE 2 - dev build

        stable {
            dimension "default"
            applicationIdSuffix ""
            apkVersionNameSuffix = ""

            buildConfigField "int", "FLAVOR_TYPE", "0"

            manifestPlaceholders = [
                    appName              : "KurobaExLite",
                    iconLoc              : "@mipmap/ic_launcher_release",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider"
            ]
        }
        beta {
            dimension "default"
            // Different app ids for different flavors so that the users are able to install both
            // of them without deleting anything
            applicationIdSuffix ".beta"
            apkVersionNameSuffix = "-beta"

            buildConfigField "int", "FLAVOR_TYPE", "1"

            // The same as in stable flavor
            manifestPlaceholders = [
                    appName              : "KurobaExLite-beta",
                    iconLoc              : "@mipmap/ic_launcher_beta",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider"
            ]
        }
        dev {
            dimension "default"
            // Different app ids for different flavors so that the users are able to install both
            // of them without deleting anything
            applicationIdSuffix ".dev"
            apkVersionNameSuffix = "-dev"

            buildConfigField "int", "FLAVOR_TYPE", "2"

            // The same as in stable flavor
            manifestPlaceholders = [
                    appName              : "KurobaExLite-dev",
                    iconLoc              : "@mipmap/ic_launcher_dev",
                    fileProviderAuthority: "${defaultConfig.applicationId}${applicationIdSuffix}.fileprovider"
            ]
        }
    }

    buildTypes {
        // manifestPlaceholders do not work here for some reason so here is a little hack.
        // We need to iterate each build variant and for each build variant we need to find it's
        // flavor then we need to extract the versionNameSuffix from the flavor and update the output
        // apk name with it.
        android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                Object flavor = getCurrentFlavor(variant.flavorName)
                if (flavor == null) {
                    throw new GradleException("Couldn't find flavor by variant.flavorName = ${variant.flavorName}")
                }
                Object abi = output.getFilter(com.android.build.OutputFile.ABI)
                if (abi == null) {
                    throw new GradleException("Couldn't find abi")
                }

                outputFileName = "KurobaExLite${flavor.apkVersionNameSuffix}-${abi}.apk"
            }
        }

        release {
            File propsFile = file('release.properties')

            if (propsFile.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(propsFile)
                props.load(is)

                signingConfigs {
                    release {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']

                        v1SigningEnabled true
                        v2SigningEnabled true
                        enableV3Signing = true
                        enableV4Signing = true
                    }
                }

                is.close()
                signingConfig signingConfigs.release
            }

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.cfg'

            debuggable = false
        }
        debug {
            File f = file('debug.properties')
            if (f.exists()) {
                Properties props = new Properties()
                InputStream is = new FileInputStream(f)
                props.load(is)

                signingConfigs {
                    debug {
                        storeFile file(props['keystoreFile'])
                        storePassword props['keystorePass']
                        keyAlias props['keyAlias']
                        keyPassword props['keyPass']

                        v1SigningEnabled true
                        v2SigningEnabled true
                        enableV3Signing = true
                        enableV4Signing = true
                    }
                }

                is.close()
                signingConfig signingConfigs.debug
            }

            minifyEnabled false
            debuggable = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true

        freeCompilerArgs = [
                "-Xopt-in=kotlin.Experimental",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=kotlin.ExperimentalStdlibApi",
                "-Xopt-in=coil.annotation.ExperimentalCoilApi"
        ]
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.ui:ui-util:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation 'dev.chrisbanes.snapper:snapper:0.2.0'
    implementation 'com.squareup.logcat:logcat:0.1'
    implementation "com.squareup.okhttp3:okhttp:${okhttp}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlin_coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlin_coroutines_version}"
    implementation "io.coil-kt:coil:${coil}"
    implementation "io.coil-kt:coil-compose:${coil}"

    implementation 'com.github.K1rakishou:image-decoder:7929849762'
    implementation 'com.github.K1rakishou:ComposeSubsamplingScaleImage:0a9e79779c'

    implementation "com.squareup.moshi:moshi-kotlin:${moshi}"
    ksp "com.squareup.moshi:moshi-kotlin-codegen:${moshi}"

    implementation "androidx.room:room-runtime:${room}"
    implementation "androidx.room:room-ktx:${room}"
    ksp "androidx.room:room-compiler:${room}"

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}

def getCurrentFlavor(String name) {
    Object resultFlavor = null

    android.productFlavors.all { flavor ->
        if (flavor.name == name) {
            resultFlavor = flavor
        }
    }

    return resultFlavor
}
